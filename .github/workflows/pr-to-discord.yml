name: Notify Reviewers on PR

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - ready_for_review
      - review_requested
      - review_request_removed

permissions:
  pull-requests: read
  contents: read

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    # (환경 시크릿을 쓰는 경우 주석 해제 후 환경 이름 지정)
    # environment: production
    env:
      GH_TOKEN: ${{ github.token }}                             # gh CLI 인증
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}   # /github 없는 일반 웹훅 URL
      USER_MAP: ${{ secrets.USER_MAP }}                         # {"githubLogin":"DISCORD_USER_ID", ...}

    steps:
      - name: Guard – required secrets present?
        id: guard
        run: |
          set -euo pipefail
          missing=0
          if [ -z "${DISCORD_WEBHOOK_URL:-}" ]; then
            echo "::error::DISCORD_WEBHOOK_URL secret is missing in the upstream repo."
            missing=1
          fi
          if [ $missing -eq 1 ]; then
            exit 78  # neutral: skip job
          fi

      - name: Get PR reviewers (users & teams)
        id: reviewers
        if: steps.guard.outcome != 'failure'
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          RESP=$(gh api repos/$REPO/pulls/$PR_NUMBER)

          USERS=$(echo "$RESP" | jq -c '[.requested_reviewers[]?.login] // []')
          TEAMS=$(echo "$RESP" | jq -c '[.requested_teams[]?.slug] // []')

          echo "users_b64=$(echo "$USERS" | base64 -w0)" >> "$GITHUB_OUTPUT"
          echo "teams_b64=$(echo "$TEAMS" | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Notify Discord
        if: steps.guard.outcome != 'failure'
        run: |
          set -euo pipefail

          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          USER_JSON=$(echo "${{ steps.reviewers.outputs.users_b64 }}" | base64 --decode)
          TEAM_JSON=$(echo "${{ steps.reviewers.outputs.teams_b64 }}" | base64 --decode)

          USER_MAP_JSON=${USER_MAP:-"{}"}
          TEAM_MAP_JSON="{}"  # 팀 멘션 안 쓰면 비워둠

          build_mentions() {
            local arr_json="$1" map_json="$2" is_user="$3" out=""
            for item in $(echo "$arr_json" | jq -r '.[]'); do
              if [ "$is_user" = "true" ]; then
                did=$(echo "$map_json" | jq -r --arg u "$item" '.[$u] // empty')
                if [ -n "$did" ] && [[ "$did" =~ ^[0-9]+$ ]]; then
                  out="$out <@$did>"
                else
                  out="$out @$item"
                fi
              else
                # 팀 사용 시 TEAM_MAP에 "<@&ROLE_ID>"를 값으로 넣어 역할 멘션 가능
                role=$(echo "$map_json" | jq -r --arg t "$item" '.[$t] // empty')
                if [ -n "$role" ]; then out="$out $role"; else out="$out @team:$item"; fi
              fi
            done
            echo "$out"
          }

          MENTIONS_USERS=$(build_mentions "$USER_JSON" "$USER_MAP_JSON" true)
          MENTIONS_TEAMS=$(build_mentions "$TEAM_JSON" "$TEAM_MAP_JSON" false)
          MENTIONS="$(echo "$MENTIONS_USERS $MENTIONS_TEAMS" | xargs)"
          [ -z "$MENTIONS" ] && MENTIONS="(리뷰어가 지정되지 않았습니다)"

          payload=$(jq -n --arg content "$MENTIONS\n새로운 Pull Request: **$PR_TITLE**\n$PR_URL" '{content:$content}')

          curl -sS -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$payload"
