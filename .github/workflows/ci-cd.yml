name: codiit-backend-ci-cd

on:
  push:
    branches: ['dev']
  pull_request:
    branches: ['dev']

permissions:
  contents: read

jobs:
  # Test, Build 
  test-and-build:
    name: Test (Jest) -> 🏗️ Build (Nest + Prisma)
    runs-on: ubuntu-latest

    # CI 내부에서 테스트용 Postgres 서비스 실행
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app_test?schema=public
        run: npm test

      - name: Build project
        run: npm run build

  # Docker Build, Deploy 
  docker-and-deploy:
    name: Docker build/push -> Deploy to EC2
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
        run: |
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .

      - name: Push Docker image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}

      # EC2 배포 
      - name: Upload .env to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            mkdir -p ~/apps/codiit
            cat > ~/apps/codiit/.env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

      - name: Login Docker Hub on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Run Prisma Migrate on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker pull $IMAGE:latest
            docker run --rm --env-file ~/apps/codiit/.env $IMAGE:latest npx prisma migrate deploy

      - name: Deploy new container on EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME || 'codiit-backend' }}
          HOST_PORT: ${{ secrets.HOST_PORT || '8000' }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker pull $IMAGE:latest
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              --env-file ~/apps/codiit/.env \
              -p ${HOST_PORT}:3000 \
              $IMAGE:latest

            docker image prune -f
